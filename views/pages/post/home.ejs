<style>
  [v-cloak] {
    display: none;
  }
  .post-container {
    background-color: white;
    margin: 16px;
    padding: 16px;
    border-radius: 5px;
    border: solid 1px rgb(199, 199, 199);
    display: flex;
    flex-direction: column;
  }
  .form-container {
    background-color: white;
    margin: 16px;
    padding: 16px;
    border-radius: 5px;
    border: solid 1px rgb(199, 199, 199);
  }
  .modal-container {
    background-color: rgba(0, 0, 0, 0.8);
    width: 100%;
    height: 100%;
    position: fixed;
    top: 0;
    left: 0;
    padding-top: 150px;
  }
  .modal-form {
    background-color: white;
    margin: auto;
    width: 50%;
    padding: 24px;
    border-radius: 5px;
    border: solid 1px rgb(199, 199, 199);
  }

  .red {
    background-color: red;
  }
  .gray {
    background-color: darkgray;
  }
  .blue {
    background-color: rgb(7, 130, 255);
  }
  .btn {
    border-radius: 5px;
    border: solid 1px rgb(199, 199, 199);
    padding: 5px 10px;
    font-weight: bold;
    color: white;
  }
  .display-create-post {
    background-color: white;
    max-width: 100%;
    border-radius: 5px;
    border: solid 1px rgb(199, 199, 199);
    padding: 8px;
    font-weight: bold;
  }
  .center-cropped {
    object-position: center; /* Center the image within the element*/
    object-fit: cover;
    width: 50px;
    height: 50px;
    border-radius: 100px;
    border: solid 1px rgb(94, 94, 94);
  }
</style>

<%- partial('../../partials/navbar.ejs') %>

<div id="app" v-cloak>
  <div style="display: flex; flex-direction: column; padding: 16px 16px 0">
    <button v-on:click="createPost()" class="display-create-post">
      Create Post
    </button>
  </div>

  <div v-if="shouldShowCreatePost" class="modal-container">
    <form
      class="modal-form"
      style="display: flex; flex-direction: column"
      @submit="confirmCreatePost"
    >
      <h4>Create Post</h4>
      <textarea
        name="postText"
        id="postText"
        cols=""
        rows=""
        v-model="postText"
      ></textarea>
      <div>
        <input
          v-on:change="handleInputImage"
          type="file"
          id="imageFile"
          ref="imageFile"
          name="imageFile"
          style="margin: 0.4rem 0"
        />
      </div>
      <div id="preview" style="width: 100%">
        <img v-if="previewUrl" :src="previewUrl" style="width: 100%" />
      </div>
      <div style="margin-top: 16px; display: flex">
        <div style="flex: 1"></div>
        <button v-on:click="shouldShowCreatePost = false" class="btn gray">
          Cancel
        </button>
        <button
          v-bind:class="[isCreatingPost ? 'btn gray': 'btn blue']"
          style="color: white; margin-left: 16px"
        >
          Create
        </button>
      </div>
    </form>
  </div>

  <div v-if="shouldShowDeleteConfirmation" class="modal-container">
    <div class="modal-form">
      <div>Are you sure you want to delete this post?</div>
      <div style="margin-top: 16px; display: flex">
        <div style="flex: 1"></div>
        <button
          v-on:click="shouldShowDeleteConfirmation = false"
          class="btn gray"
        >
          Cancel
        </button>
        <button
          v-on:click="confirmDelete()"
          v-bind:class="[isDeletingPost ? 'btn gray': 'btn red']"
          style="color: white; margin-left: 16px"
        >
          Delete
        </button>
      </div>
    </div>
  </div>

  <div v-for="p in posts"><%- partial('../../partials/post.ejs') %></div>
</div>

<%- exposeLocalsToBrowser({keys: ['allPosts']}) %>

<script>
  const App = new Vue({
    el: "#app",
    data: {
      posts: window.SAILS_LOCALS.allPosts,
      shouldShowDeleteConfirmation: false,
      selectedPostToDelete: null,
      isDeletingPost: false,
      shouldShowCreatePost: false,
      isCreatingPost: false,
      previewUrl: null,
      postText: "",
      imageFile: null,
    },
    methods: {
      deletePost: async function (post) {
        this.selectedPostToDelete = post;
        this.shouldShowDeleteConfirmation = true;
        return;
      },
      confirmDelete: async function () {
        const postId = this.selectedPostToDelete.id;
        try {
          this.isDeletingPost = true;
          const res = await axios.delete(`/post/${postId}`);
          console.log(res);
          this.shouldShowDeleteConfirmation = false;

          if (res.status == 200) {
            this.posts = this.posts.filter((p) => {
              return p.id != this.selectedPostToDelete.id;
            });
            console.log("post deleted");
          }
          this.isDeletingPost = false;
        } catch (err) {
          console.error(err.toString());
        }
      },
      createPost: function () {
        this.shouldShowCreatePost = true;
      },
      handleInputImage: function (event) {
        const file = this.$refs.imageFile.files[0];
        this.previewUrl = URL.createObjectURL(file);
        this.imageFile = file;
      },
      confirmCreatePost: async function (e) {
        e.preventDefault();

        console.log(this.postText);
        console.log(this.imageFile);

        let formData = new FormData();
        formData.append("postText", this.postText);
        formData.append("imageFile", this.imageFile);
        //formData.append("_method", "POST");

        try {
          this.isCreatingPost = true;
          const res = await axios.post("/post", formData, {
            headers: {
              "Content-Type": "multipart/form-data",
            },
          });
          console.log(res);
          this.shouldShowCreatePost = false;
          if (res.status === 200) {
            console.log("Post created.");
            window.location.href = res.request.responseURL;
          }
          this.isCreatingPost = false;
        } catch (err) {
          console.log(err.toString());
        }
      },
    },
  });
</script>
